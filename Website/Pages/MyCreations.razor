@page "/MyCreations"
@using Microsoft.EntityFrameworkCore;
@using MythicalToyMachine.Data;
@using Microsoft.AspNetCore.Authentication;
@using Microsoft.AspNetCore.Authentication.Cookies;
@using Microsoft.AspNetCore.Authorization;
@using System.Security.Claims;
@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor _httpContextAccessor
@inject HttpClient Http
@inject IDbContextFactory<PostgresContext> dbcontext
@inject IUserRoleService userRoleService

<h3>MyCreations</h3>

@if (userRoleService.IsAuthenticated)
{
    @if (Creations.Length == 0 || Creations is null)//their list of creations is empty
    {
        <a>You don't have any saved creations</a>
    }
    else

    {
        @foreach (var k in Creations)
        {
            <div class="card" style="width: 18rem;">
                <img class="card-img-top" src=@k.ThumbnailPath>
                <div class="card-body">
                    <h5 class="card-title">@(k.Kitname) </h5>
                    <h7 class="card-body">@(k.Creature?.Creaturename) base figure</h7>
                    <ul>
                        @foreach (var a in k.KitAccessories)
                        {
                            <li>@(a.Acc?.Accessoryname)</li>
                        }
                    </ul>
                </div>
            </div>            
        }

    }
}

else
{
    <a>You need to log in to view your creations</a>
}

@code {
    private ClaimsPrincipal User;
    private Kit[] Creations { get; set; }
    private int userId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Creations = new Kit[] { };
        User = _httpContextAccessor.HttpContext.User;
        var GoogleUser = User.Identities.FirstOrDefault();
        if (GoogleUser.IsAuthenticated)
        {
            userId = await userRoleService.LookUpUser(GoogleUser.FindFirst(ClaimTypes.Email).Value,
                GoogleUser.FindFirst(ClaimTypes.Name).Value,
                GoogleUser.FindFirst(ClaimTypes.Surname).Value
                );
        if (userRoleService.IsAuthenticated)
        {
            var context = dbcontext.CreateDbContext();
            Creations = await context.Kits.Where(k => k.CreatorId == userId)
                                          .Include(k => k.KitAccessories)
                                          .ThenInclude(k => k.Acc)
                                          .ToArrayAsync();
        }
        }
     
    }

}
