@page "/build"
@using Microsoft.EntityFrameworkCore;
@using MythicalToyMachine.Data;
@using Microsoft.AspNetCore.Authentication;
@using Microsoft.AspNetCore.Authentication.Cookies;
@using Microsoft.AspNetCore.Authorization;
@using System.Security.Claims;
@using Microsoft.AspNetCore.Http;
@inject IHttpContextAccessor _httpContextAccessor
@inject HttpClient Http
@inject IDbContextFactory<PostgresContext> dbcontext
@inject IUserRoleService userRoleService
@inject NavigationManager navigationManager

<h3>Character Creator</h3>

@if (userRoleService.IsAuthenticated)
{

    <div id="flex-container">
        <div id="accessory-column" Class="flex-column">
            <div Class="accessory-img img-fluid" id="horn">
                    <img class="img-fluid" src="/Images/Accessories/horn.png" @onmousedown="() => AddAccessory(1)">
            </div>
                <div Class="accessory-img img-fluid" id="antlers" @onmousedown="() => AddAccessory(5)">
                <img class="img-fluid" src="/Images/Accessories/antlers.png">
            </div>
                <div Class="accessory-img img-fluid" id="wing" @onmousedown="() => AddAccessory(3)">
                <img class="img-fluid" src="/Images/Accessories/wing.png">
            </div>
                <div Class="accessory-img img-fluid" id="batwings" @onmousedown="() => AddAccessory(6)">
                <img class="img-fluid" src="/Images/Accessories/batwings.png">
            </div>
                <div Class="accessory-img img-fluid" id="shoe" @onmousedown="() => AddAccessory(4)">
                <img class="img-fluid" src="/Images/Accessories/shoe.png">
            </div> 
        </div>

        <div id="center-column" class="flex-column">
            <div id="page-subtitle img-fluid">
                <img style="user-select: none;" src="/Images/Accessories/subtitle.png">
            </div>
            <div id="dragContainer" class="dino-img">
                    <canvas id="dinoCanvas" width="600" height="300">

                    </canvas>
            </div>
            <div class="option-buttons">
                @if(creationSaved)
                {
                        <button class="btn btn-success option-buttons" @onclick="() => AddKitAsync() ">Saved!</button>
                    }
                    else
                    {
                        <button class="btn btn-dark option-buttons" @onclick="() => AddKitAsync() ">Save</button>

                    }
                <a href="/MyCreations" class="btn btn-secondary option-buttons">My Creations</a>

            </div>
           

        </div>

            <div id="colors-column" class="flex-column">
                <div class="red rounded-circle color-selection" data-color="red"></div>
                <div class="orange rounded-circle color-selection" data-color="orange"></div>
                <div class="yellow rounded-circle color-selection" data-color="yellow"></div>
                <div class="green rounded-circle color-selection" data-color="green"></div>
                <div class="blue rounded-circle color-selection" data-color="blue"></div>
                <div class="purple rounded-circle color-selection" data-color="purple"></div>
                <img id="eraser" draggable="false" src="/Images/Accessories/eraser.png">
            </div>
            
           

    </div>
    
        <script src="js/drawingscript.js" type="module"></script>



    


    @*
    
    <label for="kitCreature">Choose a Creature: </label>

     <select @bind="creatureid" name="kitCreature" id="kitCreature">
        @foreach(var c in Creatures)
        {
            <option value="@c.Id">@c.Creaturename</option>
        }
    </select>

     @foreach(var a in Accessories)
    {
        <button @onclick="() => AddAccessory(a.Id)">Add @a.Accessoryname</button>
    } 

     <div class="Products d-flex flex-row">
    @foreach(var u in UserAccessories)
    {
        <div class="flex-row">
            <div>@u.Acc.Accessoryname</div>
            <div>@u.Qty</div>
            <button @onclick="() => RemoveAccessory(u.AccId)">Remove 1</button>
        </div>
    }
    </div> *@

        
    
}
else
{
    <message class="validation-message">You need to <a class="btn btn-info" href="/identity/login">log in</a> to create a kit</message>
}


@code {
    private ClaimsPrincipal User;
    private int userId { get; set; }
    private string userName { get; set; }
    private Accessory[] Accessories { get; set; }
    private Creature[] Creatures { get; set; }
    private List<KitAccessory> UserAccessories { get; set; }
    private Creature? creature {get;set;}
    private string creatureid { get; set; }
    private Kit[] Creations { get; set; }
    string pencilColor;

    string imgFilePath = "/Images/Accessories/";
    string dotPng = ".png";

    private bool creationSaved;




    protected override async Task OnInitializedAsync()
    {
        Accessories = new Accessory[] { };
        Creatures = new Creature[] {};
        UserAccessories = new();
        creature = new Creature { Creaturename = ""};
        var context = dbcontext.CreateDbContext();
        Creations = new Kit[] { };
        creatureid = "1";

        try
        {
            User = _httpContextAccessor.HttpContext.User;
            var GoogleUser = User.Identities.FirstOrDefault();
            if (GoogleUser.IsAuthenticated)
            {
                userId = await userRoleService.LookUpUserAsync(
                    GoogleUser.FindFirst(ClaimTypes.Email).Value,
                    GoogleUser.FindFirst(ClaimTypes.Name).Value,
                    GoogleUser.FindFirst(ClaimTypes.Surname).Value
                    );
                userName = GoogleUser.FindFirst(ClaimTypes.Name).Value;
            }
            if (userRoleService.IsAuthenticated)
            {
                Accessories = await context.Accessories.ToArrayAsync();
                Creatures = await context.Creatures.ToArrayAsync();
                creature = await context.Creatures.Where(c => c.Id == 1).FirstOrDefaultAsync();
                Creations = await context.Kits.Where(k => k.CreatorId == userId)
                                                .Include(k => k.KitAccessories)
                                                .ThenInclude(k => k.Acc)
                                                .ToArrayAsync();
            }
        }
        catch (Exception e)
        {
            navigationManager.NavigateTo("/");
        }
    }

    private void AddAccessory(int kitID)
    {
        bool added = false;
        foreach(var ka in UserAccessories)
        {
            if (ka.AccId == kitID)
            {
                ka.Qty = ka.Qty + 1;
                added = true;
            }
        }
        if(added != true)
        {

            UserAccessories.Add(
                new KitAccessory()
                    {
                        AccId = kitID,
                        Qty = 1,
                        Acc = Accessories.Where(a => a.Id == kitID).FirstOrDefault()
                     }
            );

        }
    }

    private void RemoveAccessory(int kitID)
    {
        KitAccessory kItToRemove = new();
        foreach (var ka in UserAccessories)
        {
            if (ka.AccId == kitID && ka.Qty > 1)
            {
                ka.Qty = ka.Qty - 1;
                break;
            }
            else if (ka.AccId == kitID)
            {
                kItToRemove = ka;
                break;
            }
        }
        UserAccessories.Remove(kItToRemove);
    }

    private async Task AddKitAsync()
    {
        var context = await dbcontext.CreateDbContextAsync();
        int newKitID = context.Kits.Max(c => c.Id) + 1;
        int newKitAccID = context.KitAccessories.Max(k => k.Id) + 1;
        Kit kitToAdd = new Kit
            {
                Id = newKitID,
                Kitname = $"{userName}'s Creation{Creations.Length + 1}",
                ThumbnailPath = "/Images/FlyingDinousary.png",
                CreatorId = userId,
                Shoulddisplay = false,
                CreatureId = int.Parse(creatureid)
            };
        await context.Kits.AddAsync(kitToAdd);

        for (int i = 0; i < UserAccessories.Count; i++)
        {
            KitAccessory toAdd = new KitAccessory
                {
                    AccId = UserAccessories[i].AccId,
                    Id = newKitAccID + i,
                    KitId = newKitID,
                    Qty = UserAccessories[i].Qty

                };
            await context.KitAccessories.AddAsync(toAdd);
        }
        await context.SaveChangesAsync();
        creationSaved = true;
    }

}