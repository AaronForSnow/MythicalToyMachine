@page "/shop"
@using Microsoft.EntityFrameworkCore;
@using MythicalToyMachine.Data;
@using Microsoft.AspNetCore.Authentication;
@using Microsoft.AspNetCore.Authentication.Cookies;
@using Microsoft.AspNetCore.Authorization;
@using System.Security.Claims;
@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor _httpContextAccessor
@inject HttpClient Http
@inject IDbContextFactory<PostgresContext> dbcontext
@inject IUserRoleService userRoleService


<h3>Shop</h3>

   @*  get the info for each product from the db *@

@if(Kits is not null)
    {
        <div class="Products d-flex flex-row">    
        @foreach (var k in Kits)
            {
                <div class="card" style="width: 18rem;">
                    <img class="card-img-top" src=@k.ThumbnailPath>
                    <div class="card-body">
                        <h5 class="card-title">@(k.Kitname) </h5>
                    <h7 class="card-body">@(k.Creature?.Creaturename) base figure</h7>
                        <ul>
                            @foreach(var a in k.KitAccessories)
                        {
                            <li>@(a.Acc?.Accessoryname)</li>
                        }
                    </ul>
                    <div class="form-outline">  
                        <input min="1" max="20" for="typeNumber" type="number" id="typeNumber" class="form-control" @bind="KitQties[k.Id]" /> 
                    </div>
                        <a @onclick="() => AttemptAddToCart(k.Id, KitQties[k.Id])" class="btn btn-primary">Add To cart</a>
                        <br/>
                        <a>Individual Price: $@CalulatePrice(k.Id)</a>
                        <br/>
                        <a>Total Price: $@CalculateTotalPrice(KitQties[k.Id], k.Id)</a>

                    </div>
                </div>
            }
        </div>

        @if(SuccessMessage is not null)
        {
            <br />
            <div class="alert alert-success">@SuccessMessage</div>        
        }

        @if (ErrorMessage is not null)
        {
            <br />
            <div class="alert alert-danger">@ErrorMessage</div>
        }
    }
    else
    {
        <div>Loading...</div>
    }

@code {
    Kit[] Kits { get; set; }
    private ClaimsPrincipal User;
    bool? addedToCart { get; set; } = false;
    string? SuccessMessage { get; set; }
    string? ErrorMessage { get; set; }
    Dictionary<int, int> KitQties = new();
    CartItem[] CartItemsForId { get; set; }
    int userId;

    protected override async Task OnInitializedAsync()
    {
        using var context = dbcontext.CreateDbContext();
        Kits = await context.Kits.Where(k => k.Shoulddisplay == true)
                            .Include(C => C.Creature)
                            .Include(k => k.KitAccessories)
                            .ThenInclude(ka => ka.Acc)
                            .ToArrayAsync();



        foreach(var kit in Kits)
        {
            KitQties[kit.Id] = 1;
        }

    }

    private decimal CalculateTotalPrice(int qty, int itemid) => qty * CalulatePrice(itemid);


    private async Task AttemptAddToCart(int kitId, int quantity)
    {
        try
        {
            User = _httpContextAccessor.HttpContext.User;
            var GoogleUser = User.Identities.FirstOrDefault();
            if (GoogleUser.IsAuthenticated)
            {
                userId = await userRoleService.LookUpUser(GoogleUser.FindFirst(ClaimTypes.Email).Value,
                    GoogleUser.FindFirst(ClaimTypes.Name).Value,
                    GoogleUser.FindFirst(ClaimTypes.Surname).Value
                    );

            }
            else
            {
                SuccessMessage = null;
                ErrorMessage = "You need to sign in first in order to add to cart!";
                return;
            }


            if (userRoleService.IsAuthenticated)
            {
                await AddToCart(userId, kitId, quantity);
                SuccessMessage = "Succesfully added item to cart!";
                ErrorMessage = null;
                addedToCart = true;
            }
        }
        catch (Exception e)
        {

        }
    }
    private decimal CalulatePrice(int kitid)
    {
        var CalcKit = Kits.Where(k => k.Id == kitid).FirstOrDefault();
        decimal price = 0;
        if (CalcKit is not null)
        {
            foreach (var a in CalcKit.KitAccessories)
            {
                price += a.Acc.Price ?? 0;
            }
            price += CalcKit.Creature.Suggestedprice ?? 0;
        }
        return price;
    }
    private async Task AddToCart(int userid, int kitid, int Qty)
    {
        //TODO: if not logged in we need to let the user know they need to log in or heck just redirect them to the login page
        var context = await dbcontext.CreateDbContextAsync();
        CartItemsForId = await context.CartItems.Where(i => i.CustomerId == userId)
                      .Include(k => k.Kit)
                      .ThenInclude(C => C.Creature)
                      .Include(k => k.Kit)
                      .ThenInclude(j => j.KitAccessories)
                      .ThenInclude(a => a.Acc)
                      .Where(k => k.Kit.Id == kitid)
                      .ToArrayAsync();

        if(CartItemsForId is null || CartItemsForId.Length == 0)
        {
            var myNewKit = new CartItem()
            {
                Id = context.CartItems.Max(c => c.Id) + 1,
                CustomerId = userid,
                KitId = kitid,
                Quantity = Qty,
                SaveForLater = false
            };

            context.CartItems.Add(myNewKit);
        }
        else if (CartItemsForId.Length > 1)
        {
            int newQuantity = 0;
            foreach (var item in CartItemsForId)
            {
                newQuantity += item.Quantity;
            }
            CartItemsForId[0].Quantity = newQuantity;

            context.Update(CartItemsForId[0]);

            for (int i = 1; i < CartItemsForId.Length; i++)
            {
                context.Remove(CartItemsForId[i]);
            }
        }
        else //if an item of the same type already exists and we want to update the quantity
        {
            CartItemsForId[0].Quantity += Qty;
            context.Update(CartItemsForId[0]);
        }
        await context.SaveChangesAsync();
    }
    

    //add to card button adds to card


}
