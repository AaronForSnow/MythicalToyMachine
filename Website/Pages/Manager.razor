@page "/manager"
@using Microsoft.EntityFrameworkCore;
@using MythicalToyMachine.Data;
@using Microsoft.AspNetCore.Authentication;
@using Microsoft.AspNetCore.Authentication.Cookies;
@using Microsoft.AspNetCore.Authorization;
@using System.Security.Claims;
@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor _httpContextAccessor
@inject HttpClient Http
@inject IDbContextFactory<PostgresContext> dbcontext
@inject IUserRoleService userRoleService
@inject NavigationManager navigationManager

<h3>Manager</h3>
    @if(userRoleService.IsAuthenticated && role == "admin")
    {
        <table class="table">
              <thead class="thead-dark">
                <tr><th colspan="6">Requests</th></tr>
                <tr>
                  <th scope="col">ID</th>
                  <th scope="col">First</th>
                  <th scope="col">Last</th>
                  <th scope="col">Date</th>
                  <th scope="col">Items</th>
                  <th scope="col">Total</th>
                </tr>
              </thead>
              <tbody>
                @foreach(var r in requests)
                {
                <tr>
                  @*
                <th scope="row">1</th>*@

                  <td>@r.Id</td>
                  <td>@r.Customer.Firstname</td>
                  <td>@r.Customer.Surname</td>
                  <td>@r.Requestdate</td>
                  <td>
                      <ul>
                          @foreach(var i in r.RequestItems)
                          {
                              <li>
                                  @i.Kit.Kitname, $@i.RequestPrice
                              </li>
                          }
                      </ul>
                  </td>
                  <td>
                      $@GetTotalPrice(r.Id)
                  </td>
                </tr>

                }
              </tbody>
        </table>

        <table class="table">
                <thead class="thead-dark">
                <tr><th colspan="5">Popular Accesories</th></tr>
                    <tr>
                        <th scope="col">ID</th>
                        <th scope="col">Name</th>
                        <th scope="col">Price</th>
                        <th scope="col">Description</th>
                        <th scope="col">Count</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var a in AccesoryCounts)
                    {
                        <tr>
                            <td>@a.Item1.Id</td>
                            <td>@a.Item1.Accessoryname</td>
                            <td>@a.Item1.Price</td>
                            <td>@a.Item1.Discription</td>
                            <td>@a.Item2</td>
                        </tr>

                    }
                </tbody>
        </table>
        
    }
    else
    {
    <div id="video-container">
        <video id="video-background" autoplay muted loop>
            <source src="/Videos/Manager.mp4" type="video/mp4">
            Your browser does not support the video tag.
        </video>
        <div id="video-overlay">
            <p id="main-title">You're not Authorized to see This Content!</p>
            <a href="/" class="apple-button">Return To Home</a>
        </div>
    </div>
    }

@code {
    private ClaimsPrincipal User;
    private Request[] requests { get; set;}
    private List<(Accessory, int)> AccesoryCounts { get; set; } 
    private int userId { get; set; }
    private string? role { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {

            userRoleService.ResetUser();
            AccesoryCounts = new List<(Accessory, int)>();
            User = _httpContextAccessor.HttpContext.User;
            var GoogleUser = User.Identities.FirstOrDefault();
            if (GoogleUser.IsAuthenticated)
            {
                userId = await userRoleService.LookUpUserAsync(GoogleUser.FindFirst(ClaimTypes.Email).Value,
                    GoogleUser.FindFirst(ClaimTypes.Name).Value,
                    GoogleUser.FindFirst(ClaimTypes.Surname).Value
                    );
                if (userRoleService.IsAuthenticated)
                {
                    var context = dbcontext.CreateDbContext();
                    var customer = await context.Customers.Where(c => c.Id == userId)
                                                  .Include(c => c.CustomerRole)
                                                  .FirstOrDefaultAsync();
                    role = customer.CustomerRole.RoleDescription;
                }
                if (userRoleService.IsAuthenticated && role == "admin")
                {
                    var context = dbcontext.CreateDbContext();
                    requests = await context.Requests.Include(r => r.RequestItems)
                                                        .ThenInclude(i => i.Kit)
                                                            .ThenInclude(k => k.KitAccessories)
                                                     .Include(r => r.Customer)
                                                     .ToArrayAsync();

                    var accesories = await context.Accessories.ToListAsync();
                    foreach (var a in accesories)
                    {
                        AccesoryCounts.Add((a, CalculateCounts(a.Id)));
                    }
                    AccesoryCounts = AccesoryCounts.OrderBy(a => a.Item2).ToList();
                }
            }
        }
        catch(Exception e)
        {
            navigationManager.NavigateTo("/");
        }
    }

    private decimal? GetTotalPrice(int requestID)
    {
        decimal? total = 0m;

        Request items = requests.Where(r => r.Id == requestID).FirstOrDefault();

        foreach(var i in items.RequestItems)
        {
            total += i.RequestPrice;
        }

        return total;
    }

    private int CalculateCounts(int AccesoryID)
    {
        int count = 0;
        foreach(var r in requests)
        {
            foreach(var item in r.RequestItems)
            {
                foreach(var a in item.Kit.KitAccessories)
                {
                    if(a.AccId == AccesoryID)
                    {
                        count += a.Qty;
                    }
                }
            }
        }
        return count;

    }
}
