@page "/imageUpload"
@inject ILogger<CreateKit> Logger
@using Microsoft.EntityFrameworkCore;
@using MythicalToyMachine.Data;
@using Microsoft.AspNetCore.Authentication;
@using Microsoft.AspNetCore.Authentication.Cookies;
@using Microsoft.AspNetCore.Authorization;
@using System.Security.Claims;
@using Microsoft.AspNetCore.Http;
@inject NavigationManager NV
@inject IHttpContextAccessor _httpContextAccessor
@inject HttpClient Http
@inject IDbContextFactory<PostgresContext> dbcontext
@inject IUserRoleService userRoleService


@if(userRoleService.IsAuthenticated && role == "admin")
    {     
        @if (Editing)
        {
            <EditForm Model="@Model" OnSubmit="@Submit">
                <InputFile OnChange="@LoadPick" />
                <button type="submit">Submit</button>
            </EditForm>
        }

        @foreach(var k in Kits)
        {
            <div class="card" style="width: 18rem;">
                <img class="card-img-top" src=@k.ThumbnailPath>
                <div>@k.Kitname</div>
                <div>
                <a @onclick="() => SetModel(k.Id)" class="btn btn-primary">Edit</a> 
            </div>
            </div>
        }
    }
else
{
    <h3>Please sign up as an admin to view this page</h3>
}

@code {
    public Kit Model { get; set; } = new Kit();
    private bool cannotSavePick = false;
    Kit[] Kits { get; set; }
    private ClaimsPrincipal User;
    private int userId { get; set; }
    private string? role { get; set; }
    private bool Editing { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Model ??= new();
        var context = dbcontext.CreateDbContext();
        Kits = await context.Kits.ToArrayAsync();
        User = _httpContextAccessor.HttpContext.User;
        var GoogleUser = User.Identities.FirstOrDefault();

        if (GoogleUser.IsAuthenticated)
        {
            userId = await userRoleService.LookUpUser(GoogleUser.FindFirst(ClaimTypes.Email).Value,
                GoogleUser.FindFirst(ClaimTypes.Name).Value,
                GoogleUser.FindFirst(ClaimTypes.Surname).Value
                );
        }
        if (userRoleService.IsAuthenticated)
        {
            var customer = await context.Customers.Where(c => c.Id == userId)
                                          .Include(c => c.CustomerRole)
                                          .FirstOrDefaultAsync();
            role = customer.CustomerRole.RoleDescription;
        }
        if (userRoleService.IsAuthenticated && role == "admin")
        {

        }
    }

    private void Submit()
    {
        Logger.LogInformation("Model.Id = {Id}", Model.Id);
    }

    private async Task LoadPick(InputFileChangeEventArgs e)
    {
        var filetype = e.GetType;
        try{
            if (Model.Kitname is null)
            {
                Model.Kitname = Model.Id.ToString();   
            }
            //Model.Kitname = Model.Kitname.Replace(" ", "");
            var path = $"wwwroot/Images/{Model.Kitname.Replace(" ", "") + Model.Id}.jpg";
            await using FileStream fs = new(path, FileMode.Create);
            await e.File.OpenReadStream().CopyToAsync(fs); //maxfilesize
            path = $"/Images/{Model.Kitname.Replace(" ", "") + Model.Id}.jpg";

            NewKitThumbnail(Model.Id, path);
            NV.NavigateTo("/imageUpload",true);
        }
        catch (Exception ex)
        {
            cannotSavePick = true;
        }
    }

    private async Task NewKitThumbnail(int KitID, string path)
    {
        var context = dbcontext.CreateDbContext();
        var KitToUpdate = await context.Kits.Where(k => k.Id == KitID).FirstOrDefaultAsync();
        KitToUpdate.ThumbnailPath = path;
        context.Kits.Update(KitToUpdate);
        await context.SaveChangesAsync();
    }
    private async Task SetModel(int kitID)
    {
        var context = dbcontext.CreateDbContext();
        Model = await context.Kits.Where(k => k.Id == kitID).FirstOrDefaultAsync();
        Editing = true;
    }

}
